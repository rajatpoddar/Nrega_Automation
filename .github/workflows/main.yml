name: Build All Installers

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: extract_version
        run: |
          RAW_TAG=${GITHUB_REF##*/}
          VERSION=${RAW_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-macos:
    needs: prepare
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pyinstaller fpdf
          brew install create-dmg

      - name: Clean previous builds
        run: rm -rf dist build

      - name: Make build script executable
        run: chmod +x ./build_macos.sh

      - name: Patch version in script
        run: |
          sed -i '' "s/^APP_VERSION=.*/APP_VERSION=\"${{ needs.prepare.outputs.version }}\"/" build_macos.sh

      - name: Generate .env from secret
        run: echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" > .env

      - name: Run macOS build
        run: ./build_macos.sh

      - name: Rename DMG
        run: |
          DMG_FILE=$(find dist -iname '*.dmg' | head -n 1)
          if [ -f "$DMG_FILE" ]; then
            mv "$DMG_FILE" "dist/NREGABot-v${{ needs.prepare.outputs.version }}-macOS.dmg"
          else
            echo "❌ DMG not found!" && ls -la dist/ && exit 1
          fi

      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: dist/NREGABot-v${{ needs.prepare.outputs.version }}-macOS.dmg

  build-windows:
    needs: prepare
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pyinstaller fpdf

      - name: Clean builds
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Test-Path build) { Remove-Item -Recurse -Force build }

      - name: Generate .env from secret
        shell: pwsh
        run: |
          "@`"SENTRY_DSN=${{ secrets.SENTRY_DSN }}`"" | Out-File -Encoding ASCII -FilePath .env

      - name: Build portable EXE
        run: |
          pyinstaller --clean --noconfirm --windowed --name "NREGABot" `
            --icon=assets/app_icon.ico `
            --add-data="logo.png;." `
            --add-data="payment_qr.png;." `
            --add-data="theme.json;." `
            --add-data="changelog.json;." `
            --add-data="assets;assets" `
            --add-data=".env;." `
            --add-data="jobcard.jpeg;." `
            --collect-data fpdf `
            main_app.py

      - name: Rename portable EXE
        run: |
          mkdir dist_out
          mv dist/NREGABot/NREGABot.exe dist_out/NREGABot-v${{ needs.prepare.outputs.version }}-Portable.exe

      - name: Install Inno Setup
        run: |
          curl -L -o is.exe https://jrsoftware.org/download.php/is.exe
          Start-Process .\is.exe -ArgumentList "/VERYSILENT" -Wait

      - name: Build installer
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer_script.iss

      - name: Rename installer EXE
        run: |
          mkdir dist_installer
          mv Output/NREGABot-Setup.exe dist_installer/NREGABot-v${{ needs.prepare.outputs.version }}-Setup.exe

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            dist_out/*.exe
            dist_installer/*.exe

  build-linux:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies + fpm
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential python3-pyqt5 pyqt5-dev-tools
          sudo gem install --no-document fpm

      - name: Install Python dependencies
        run: pip install -r requirements.txt pyinstaller fpdf

      - name: Clean previous builds
        run: rm -rf dist build package

      - name: Generate .env from secret
        run: echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" > .env

      - name: Build Linux app
        run: |
          pyinstaller --clean --noconfirm --windowed --name "NREGABot" \
            --add-data="logo.png:." \
            --add-data="payment_qr.png:." \
            --add-data="theme.json:." \
            --add-data="changelog.json:." \
            --add-data="assets:assets" \
            --add-data=".env:." \
            --add-data="jobcard.jpeg:." \
            --collect-data fpdf \
            main_app.py

      - name: Create .deb package
        run: |
          mkdir -p package/usr/local/bin
          cp dist/NREGABot/NREGABot package/usr/local/bin/
          fpm -s dir -t deb -n nregabot -v ${{ needs.prepare.outputs.version }} \
              --prefix=/usr/local/bin \
              -C package .

      - name: Rename .deb
        run: mv *.deb NREGABot-v${{ needs.prepare.outputs.version }}-linux.deb

      - name: Upload .deb
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: NREGABot-v${{ needs.prepare.outputs.version }}-linux.deb
          
  release:
    # This condition ensures the release job ONLY runs when you push a tag (e.g., v2.5.4)
    # It prevents the error by skipping the job on manual runs against the 'main' branch.
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-macos, build-windows, build-linux, prepare]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Read changelog.json and format description
        run: |
          # Use the version from the 'prepare' job to ensure consistency
          VERSION="${{ needs.prepare.outputs.version }}"
  
          # Create the release notes header
          echo "## What's New in v$VERSION" > release.md
          echo "" >> release.md
          
          # This command reads the correct version's entries from changelog.json 
          # and formats them into a Markdown bulleted list.
          jq -r --arg v "$VERSION" '.[$v][] | "* " + .' changelog.json >> release.md
          
          echo "--- Generated release.md ---"
          cat release.md
          echo "--------------------------"
  
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: NREGA Bot v${{ needs.prepare.outputs.version }}
          tag_name: v${{ needs.prepare.outputs.version }}
          body_path: release.md
          files: |
            release-assets/**/*NREGABot*-macOS.dmg
            release-assets/**/*NREGABot*-Portable.exe
            release-assets/**/*NREGABot*-Setup.exe
            release-assets/**/*NREGABot*-linux.deb
