name: Build All Installers

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"

  build-macos:
    needs: prepare
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pyinstaller
        run: pip install pyinstaller

      - name: Make .env file
        run: echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" > .env

      - name: Build macOS DMG
        run: |
          chmod +x build_macos.sh
          ./build_macos.sh

      - name: Rename DMG
        run: |
          DMG_FILE=$(find dist -name '*.dmg' | head -n 1)
          if [[ -z "$DMG_FILE" ]]; then echo "DMG not found!"; exit 1; fi
          mv "$DMG_FILE" "dist/NREGABot-v${{ needs.prepare.outputs.version }}-macOS.dmg"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: dist/*.dmg

  build-windows:
    needs: prepare
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pyinstaller
        run: pip install pyinstaller

      - name: Clean builds
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Test-Path build) { Remove-Item -Recurse -Force build }

      - name: Generate .env
        shell: pwsh
        run: |
          "@`"SENTRY_DSN=${{ secrets.SENTRY_DSN }}`"" | Out-File -Encoding ASCII -FilePath .env

      - name: Build Portable EXE
        run: pyinstaller --clean --noconfirm --windowed --name "NREGABot" --add-data ".env;." main_app.py

      - name: Rename portable
        run: Rename-Item -Path "dist\NREGABot\NREGABot.exe" -NewName "NREGABot-v${{ needs.prepare.outputs.version }}-Portable.exe"

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Build Installer
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer_script.iss

      - name: Rename installer
        run: Rename-Item "Output\NREGABot-Setup.exe" "NREGABot-v${{ needs.prepare.outputs.version }}-Setup.exe"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: |
            dist\NREGABot-v*-Portable.exe
            Output\NREGABot-v*-Setup.exe

  build-linux:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm
          pip install pyinstaller

      - name: Create .env
        run: echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" > .env

      - name: Build binary
        run: pyinstaller --clean --noconfirm --windowed --name "NREGABot" --add-data ".env:." main_app.py

      - name: Package .deb with FPM
        run: |
          VERSION=${{ needs.prepare.outputs.version }}
          mkdir -p pkg/usr/local/bin
          cp dist/NREGABot/NREGABot pkg/usr/local/bin/
          fpm -s dir -t deb -n nregabot -v "$VERSION" --prefix=/ -C pkg .

      - name: Rename .deb
        run: mv nregabot_${{ needs.prepare.outputs.version }}_amd64.deb NREGABot-v${{ needs.prepare.outputs.version }}-linux.deb

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: ./NREGABot-v*-linux.deb

  release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Parse changelog
        id: changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          TITLE="NREGA Bot v$VERSION"
          BODY=$(jq -r --arg v "$VERSION" '.[$v][]' changelog.json | sed 's/^/- /')
          echo "$BODY" > body.md
          echo "title=$TITLE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.changelog.outputs.title }}
          tag_name: ${{ github.ref_name }}
          body_path: body.md
          files: |
            release-assets/**/NREGABot-v*-macOS.dmg
            release-assets/**/NREGABot-v*-Portable.exe
            release-assets/**/NREGABot-v*-Setup.exe
            release-assets/**/NREGABot-v*-linux.deb
