# .github/workflows/release.yml
# This workflow automates the build and release process for the NREGA Bot application.
#
# --- How it works ---
# 1. Automatic Trigger: Runs when you push a new tag starting with 'v' (e.g., v2.5.5).
# 2. Manual Trigger: Can be run manually from the GitHub Actions tab. You will be prompted for a tag.
# 3. Read Info: It reads the version number and changelog from your version.json file.
# 4. Build in Parallel: Builds the application for Windows, macOS, and Linux.
# 5. Create Release: Creates a new GitHub Release with the changelog and attaches the built files.
#
name: Create Application Release

# --- TRIGGERS ---
on:
  # 1. Pushing a tag like v1.2.3
  push:
    tags:
      - 'v*.*.*'
  # 2. Manually from the Actions tab
  workflow_dispatch:
    inputs:
      tag:
        description: 'The tag to build (e.g., v2.5.5)'
        required: true
        default: 'v2.5.5'

jobs:
  # This job reads the version and changelog to use in other jobs
  get-release-info:
    name: Get Release Information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_clean_version.outputs.version }} # e.g., 2.5.5
      tag: ${{ steps.get_tag.outputs.tag }}                   # e.g., v2.5.5
      changelog: ${{ steps.get_changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq with retries
        run: |
          for i in 1 2 3; do
            sudo apt-get update && sudo apt-get install -y jq && exit 0
            echo "apt-get failed on attempt $i, retrying in 15 seconds..."
            sleep 15
          done
          echo "Failed to install jq after 3 attempts."
          exit 1

      - name: Determine tag name
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Get clean version number from tag
        id: get_clean_version
        run: echo "version=$(echo ${{ steps.get_tag.outputs.tag }} | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Get changelog for the new version
        id: get_changelog
        run: |
          VERSION="${{ steps.get_clean_version.outputs.version }}"
          CHANGELOG_BODY=$(jq -r --arg VERSION "$VERSION" '.changelog[$VERSION] | .[] | "- \(.)"' version.json)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # --- Build Job for Windows ---
  build-windows:
    name: Build for Windows
    needs: get-release-info
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create .env file
        run: echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" > .env
        shell: bash

      - name: Install Inno Setup
        uses: crazy-max/ghaction-inno-setup@v3

      - name: Run Windows build script
        # This .bat script handles both PyInstaller and Inno Setup
        run: .\build_windows.bat

      - name: Create Portable ZIP archive
        run: |
          $version = "${{ needs.get-release-info.outputs.version }}"
          Compress-Archive -Path dist/'NREGA Bot.exe' -DestinationPath dist/NREGABot-v$version-Windows-Portable.zip

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            installer/NREGABot-v${{ needs.get-release-info.outputs.version }}-Setup.exe
            dist/NREGABot-v${{ needs.get-release-info.outputs.version }}-Windows-Portable.zip

  # --- Build Job for macOS ---
  build-macos:
    name: Build for macOS (Universal)
    needs: get-release-info
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create .env file
        run: echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" > .env

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Make build script executable
        run: chmod +x build_macos.sh

      - name: Run macOS build script
        run: ./build_macos.sh

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/NREGABot-v${{ needs.get-release-info.outputs.version }}-macOS.dmg

  # --- Build Job for Linux ---
  build-linux:
    name: Build for Linux (Portable)
    needs: get-release-info
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Linux dependencies for PyInstaller
        run: sudo apt-get update && sudo apt-get install -y libfuse2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r requirements.txt
      
      - name: Create .env file
        run: echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" > .env

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --windowed --onefile --name "NREGA Bot" \
          --icon="assets/app_icon.icns" \
          --add-data="logo.png:." \
          --add-data="theme.json:." \
          --add-data="changelog.json:." \
          --add-data="assets:assets" \
          --add-data=".env:." \
          --add-data="jobcard.jpeg:." \
          --add-data="tabs:tabs" \
          --collect-data fpdf \
          main_app.py

      - name: Create portable archive
        run: |
          cd dist
          tar -czvf NREGABot-v${{ needs.get-release-info.outputs.version }}-Linux.tar.gz "NREGA Bot"
          cd ..

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/NREGABot-v${{ needs.get-release-info.outputs.version }}-Linux.tar.gz

  # --- Publish Job ---
  publish-release:
    name: Publish GitHub Release
    needs: [get-release-info, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write # This permission is required to create a release
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: NREGA Bot ${{ needs.get-release-info.outputs.tag }}
          body: ${{ needs.get-release-info.outputs.changelog }}
          tag_name: ${{ needs.get-release-info.outputs.tag }}
          files: |
            artifacts/windows-builds/*
            artifacts/macos-build/*
            artifacts/linux-build/*
