name: Build and Release NREGA Bot

on:
  push:
    branches:
      - main # Triggers the workflow on pushes to the main branch

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Version from config.py
        shell: bash
        run: |
          VERSION=$(grep "APP_VERSION =" config.py | awk -F'"' '{print $2}')
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -v
          
      - name: Install macOS specific dependencies
        if: runner.os == 'macOS'
        run: brew install create-dmg

      - name: Create .env file
        run: echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" > .env
        shell: bash

      - name: Build the application
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./build_windows.bat
          elif [ "${{ runner.os }}" == "macOS" ]; then
            chmod +x build_macos.sh
            ./build_macos.sh
          fi

      - name: List build artifacts
        run: |
          if [ -d "dist" ]; then ls -R dist; fi
          if [ -d "installer" ]; then ls -R installer; fi
        shell: bash
        if: always()

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nrega-bot-${{ runner.os }}
          path: |
            dist/*.dmg
            installer/*.exe
            dist/*.exe
          if-no-files-found: ignore

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Get Version from config.py
        id: get_version
        run: |
          VERSION=$(grep "APP_VERSION =" config.py | awk -F'"' '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # --- NEW: Read and format the changelog for the current version ---
      - name: Format Changelog for Release
        id: format_changelog
        run: |
          python -c "
          import json, os
          version = os.environ.get('APP_VERSION')
          changelog_body = ''
          try:
              with open('changelog.json', 'r', encoding='utf-8') as f:
                  changelog_data = json.load(f)
              if version in changelog_data:
                  changes = changelog_data[version]
                  changelog_body += f'## What\'s New in v{version}\\n\\n'
                  changelog_body += '\\n'.join([f'* {item}' for item in changes])
              else:
                  changelog_body = 'No changelog entry for this version.'
          except Exception as e:
              changelog_body = f'Could not generate changelog: {e}'
          
          # Use a delimiter for multiline output
          delimiter = 'ghadelimiter_' + str(os.urandom(16).hex())
          with open(os.environ['GITHUB_OUTPUT'], 'a') as hf:
              print(f'changelog_text<<{delimiter}', file=hf)
              print(changelog_body, file=hf)
              print(delimiter, file=hf)
          "
        env:
          APP_VERSION: ${{ steps.get_version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: NREGA Bot v${{ steps.get_version.outputs.version }}
          # --- FIXED: The body now includes the formatted changelog ---
          body: |
            ${{ steps.format_changelog.outputs.changelog_text }}

            ---
            Download the appropriate installer for your operating system below.
          files: |
            artifacts/nrega-bot-Windows/installer/*.exe
            artifacts/nrega-bot-macOS/dist/*.dmg
